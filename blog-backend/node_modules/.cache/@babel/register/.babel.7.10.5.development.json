{
  "{\"sourceRoot\":\"C:\\\\Users\\\\intel\\\\Desktop\\\\stuff\\\\ReactProject\\\\blog-backend\\\\src\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\intel\\\\Desktop\\\\stuff\\\\ReactProject\\\\blog-backend\",\"filename\":\"C:\\\\Users\\\\intel\\\\Desktop\\\\stuff\\\\ReactProject\\\\blog-backend\\\\src\\\\server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\intel\\\\Desktop\\\\stuff\\\\ReactProject\\\\blog-backend\",\"plugins\":[{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.10.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend",
      "filename": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\server.js",
        "plugins": [
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar app = (0, _express[\"default\"])();\napp.use(_bodyParser[\"default\"].json());\napp.get('/api/article/:name', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {\n    var articleName, client, db, _articlesInfo;\n\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            articleName = req.params.name;\n            _context.next = 4;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useNewUrlParser: true\n            });\n\n          case 4:\n            client = _context.sent;\n            db = client.db('blog');\n            _context.next = 8;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 8:\n            _articlesInfo = _context.sent;\n            res.status(200).json(_articlesInfo);\n            client.close();\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              error: _context.t0\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\napp.post('/api/article/:name/upvote', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {\n    var articleName, client, db, _articlesInfo2, updatedArticleInfo;\n\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            articleName = req.params.name;\n            _context2.next = 4;\n            return _mongodb.MongoClient.connect('mongodb://localhost:27017', {\n              useNewUrlParser: true\n            });\n\n          case 4:\n            client = _context2.sent;\n            db = client.db('blog');\n            _context2.next = 8;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 8:\n            _articlesInfo2 = _context2.sent;\n            _context2.next = 11;\n            return db.collection('articles').updateOne({\n              name: articleName\n            }, {\n              '$set': {\n                upvotes: _articlesInfo2.upvotes + 1\n              }\n            });\n\n          case 11:\n            _context2.next = 13;\n            return db.collection('articles').findOne({\n              name: articleName\n            });\n\n          case 13:\n            updatedArticleInfo = _context2.sent;\n            res.status(200).json(updatedArticleInfo);\n            client.close();\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](0);\n            res.status(500).json({\n              message: 'Error connecting to db',\n              error: _context2.t0\n            });\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 18]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\napp.post('/api/article/:name/add-comment', function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text;\n  var articleName = req.params.name;\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  });\n  res.status(200).send(articlesInfo[articleName]);\n});\napp.listen(8000, function () {\n  return console.log('Listening on port 8000');\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsImNsaWVudCIsImRiIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlc0luZm8iLCJzdGF0dXMiLCJjbG9zZSIsIm1lc3NhZ2UiLCJlcnJvciIsInBvc3QiLCJ1cGRhdGVPbmUiLCJ1cHZvdGVzIiwidXBkYXRlZEFydGljbGVJbmZvIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImNvbW1lbnRzIiwicHVzaCIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OztBQUdBLElBQU1BLEdBQUcsR0FBRywwQkFBWjtBQUVBQSxHQUFHLENBQUNDLEdBQUosQ0FBUUMsdUJBQVdDLElBQVgsRUFBUjtBQUVBSCxHQUFHLENBQUNJLEdBQUosQ0FDSSxvQkFESjtBQUFBLHFFQUVJLGlCQUFPQyxHQUFQLEVBQVlDLEdBQVo7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWNDLFlBQUFBLFdBRmQsR0FFNEJGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUZ2QztBQUFBO0FBQUEsbUJBSTZCQyxxQkFBWUMsT0FBWixDQUNqQiwyQkFEaUIsRUFFakI7QUFBRUMsY0FBQUEsZUFBZSxFQUFFO0FBQW5CLGFBRmlCLENBSjdCOztBQUFBO0FBSWNDLFlBQUFBLE1BSmQ7QUFTY0MsWUFBQUEsRUFUZCxHQVNtQkQsTUFBTSxDQUFDQyxFQUFQLENBQVUsTUFBVixDQVRuQjtBQUFBO0FBQUEsbUJBV21DQSxFQUFFLENBQUNDLFVBQUgsQ0FBYyxVQUFkLEVBQ0VDLE9BREYsQ0FDVTtBQUFFUCxjQUFBQSxJQUFJLEVBQUVGO0FBQVIsYUFE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RGhCO0FBR0gsQ0FmTDtBQWtCQVAsR0FBRyxDQUFDZ0MsTUFBSixDQUFXLElBQVgsRUFBaUI7QUFBQSxTQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VSb290IjoiQzpcXFVzZXJzXFxpbnRlbFxcRGVza3RvcFxcc3R1ZmZcXFJlYWN0UHJvamVjdFxcYmxvZy1iYWNrZW5kXFxzcmNcXCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXHJcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJ1xyXG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInXHJcblxyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5cclxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcclxuXHJcbmFwcC5nZXQoXHJcbiAgICAnL2FwaS9hcnRpY2xlLzpuYW1lJywgXHJcbiAgICBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcclxuICAgICAgICAgICAgICAgICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JywgXHJcbiAgICAgICAgICAgICAgICB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZX1cclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGIgPSBjbGllbnQuZGIoJ2Jsb2cnKVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYXJ0aWNsZXNJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmRPbmUoeyBuYW1lOiBhcnRpY2xlTmFtZX0pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihhcnRpY2xlc0luZm8pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjbGllbnQuY2xvc2UoKVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ0Vycm9yIGNvbm5lY3RpbmcgdG8gZGInLCBlcnJvciB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuKVxyXG5cclxuYXBwLnBvc3QoXHJcbiAgICAnL2FwaS9hcnRpY2xlLzpuYW1lL3Vwdm90ZScsXHJcbiAgICBhc3luYyAocmVxLCByZXMpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcclxuICAgICAgICAgICAgICAgICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JywgXHJcbiAgICAgICAgICAgICAgICB7IHVzZU5ld1VybFBhcnNlcjogdHJ1ZX1cclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGIgPSBjbGllbnQuZGIoJ2Jsb2cnKVxyXG5cclxuICAgICAgICAgICAgY29uc3QgYXJ0aWNsZXNJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWV9KVxyXG4gICAgICAgICAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCdhcnRpY2xlcycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZU9uZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBhcnRpY2xlTmFtZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsnJHNldCc6e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXB2b3RlczogYXJ0aWNsZXNJbmZvLnVwdm90ZXMgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEFydGljbGVJbmZvID0gYXdhaXQgZGIuY29sbGVjdGlvbignYXJ0aWNsZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lfSlcclxuXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVwZGF0ZWRBcnRpY2xlSW5mbylcclxuXHJcbiAgICAgICAgICAgIGNsaWVudC5jbG9zZSgpXHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAnRXJyb3IgY29ubmVjdGluZyB0byBkYicsIGVycm9yIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4pXHJcblxyXG5hcHAucG9zdChcclxuICAgICcvYXBpL2FydGljbGUvOm5hbWUvYWRkLWNvbW1lbnQnLFxyXG4gICAgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VybmFtZSwgdGV4dCB9ID0gcmVxLmJvZHlcclxuXHJcbiAgICAgICAgY29uc3QgYXJ0aWNsZU5hbWUgPSByZXEucGFyYW1zLm5hbWVcclxuXHJcbiAgICAgICAgYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXS5jb21tZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgdXNlcm5hbWUsXHJcbiAgICAgICAgICAgIHRleHRcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChcclxuICAgICAgICAgICAgYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXVxyXG4gICAgICAgICAgICApXHJcbiAgICB9XHJcbilcclxuXHJcbmFwcC5saXN0ZW4oODAwMCwgKCkgPT4gY29uc29sZS5sb2coJ0xpc3RlbmluZyBvbiBwb3J0IDgwMDAnKSkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "client",
        "db",
        "collection",
        "findOne",
        "articlesInfo",
        "status",
        "close",
        "message",
        "error",
        "post",
        "updateOne",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "comments",
        "push",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;;;;;AAGA,IAAMA,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AAEAH,GAAG,CAACI,GAAJ,CACI,oBADJ;AAAA,qEAEI,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,YAAAA,WAFd,GAE4BF,GAAG,CAACG,MAAJ,CAAWC,IAFvC;AAAA;AAAA,mBAI6BC,qBAAYC,OAAZ,CACjB,2BADiB,EAEjB;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAFiB,CAJ7B;;AAAA;AAIcC,YAAAA,MAJd;AAScC,YAAAA,EATd,GASmBD,MAAM,CAACC,EAAP,CAAU,MAAV,CATnB;AAAA;AAAA,mBAWmCA,EAAE,CAACC,UAAH,CAAc,UAAd,EACEC,OADF,CACU;AAAEP,cAAAA,IAAI,EAAEF;AAAR,aADV,CAXnC;;AAAA;AAWcU,YAAAA,aAXd;AAcQX,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBc,aAArB;AAEAJ,YAAAA,MAAM,CAACM,KAAP;AAhBR;AAAA;;AAAA;AAAA;AAAA;AAkBQb,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,cAAAA,OAAO,EAAE,wBAAX;AAAqCC,cAAAA,KAAK;AAA1C,aAArB;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFJ;;AAAA;AAAA;AAAA;AAAA;AA2BArB,GAAG,CAACsB,IAAJ,CACI,2BADJ;AAAA,sEAEI,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEcC,YAAAA,WAFd,GAE4BF,GAAG,CAACG,MAAJ,CAAWC,IAFvC;AAAA;AAAA,mBAI6BC,qBAAYC,OAAZ,CACjB,2BADiB,EAEjB;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aAFiB,CAJ7B;;AAAA;AAIcC,YAAAA,MAJd;AAScC,YAAAA,EATd,GASmBD,MAAM,CAACC,EAAP,CAAU,MAAV,CATnB;AAAA;AAAA,mBAWmCA,EAAE,CAACC,UAAH,CAAc,UAAd,EACMC,OADN,CACc;AAAEP,cAAAA,IAAI,EAAEF;AAAR,aADd,CAXnC;;AAAA;AAWcU,YAAAA,cAXd;AAAA;AAAA,mBAacH,EAAE,CAACC,UAAH,CAAc,UAAd,EACGQ,SADH,CAEM;AAAEd,cAAAA,IAAI,EAAEF;AAAR,aAFN,EAGM;AAAC,sBAAO;AACJiB,gBAAAA,OAAO,EAAEP,cAAY,CAACO,OAAb,GAAuB;AAD5B;AAAR,aAHN,CAbd;;AAAA;AAAA;AAAA,mBAqByCV,EAAE,CAACC,UAAH,CAAc,UAAd,EACIC,OADJ,CACY;AAAEP,cAAAA,IAAI,EAAEF;AAAR,aADZ,CArBzC;;AAAA;AAqBckB,YAAAA,kBArBd;AAwBQnB,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBsB,kBAArB;AAEAZ,YAAAA,MAAM,CAACM,KAAP;AA1BR;AAAA;;AAAA;AAAA;AAAA;AA4BQb,YAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,cAAAA,OAAO,EAAE,wBAAX;AAAqCC,cAAAA,KAAK;AAA1C,aAArB;;AA5BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFJ;;AAAA;AAAA;AAAA;AAAA;AAoCArB,GAAG,CAACsB,IAAJ,CACI,gCADJ,EAEI,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA,kBACiBD,GAAG,CAACqB,IADrB;AAAA,MACFC,QADE,aACFA,QADE;AAAA,MACQC,IADR,aACQA,IADR;AAGV,MAAMrB,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B;AAEAQ,EAAAA,YAAY,CAACV,WAAD,CAAZ,CAA0BsB,QAA1B,CAAmCC,IAAnC,CAAwC;AACpCH,IAAAA,QAAQ,EAARA,QADoC;AAEpCC,IAAAA,IAAI,EAAJA;AAFoC,GAAxC;AAKAtB,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBa,IAAhB,CACId,YAAY,CAACV,WAAD,CADhB;AAGH,CAfL;AAkBAP,GAAG,CAACgC,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "C:\\Users\\intel\\Desktop\\stuff\\ReactProject\\blog-backend\\src\\",
      "sourcesContent": [
        "import express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport { MongoClient } from 'mongodb'\r\n\r\n\r\nconst app = express();\r\n\r\napp.use(bodyParser.json())\r\n\r\napp.get(\r\n    '/api/article/:name', \r\n    async (req, res) => {\r\n        try {\r\n            const articleName = req.params.name\r\n\r\n            const client = await MongoClient.connect(\r\n                'mongodb://localhost:27017', \r\n                { useNewUrlParser: true}\r\n            )\r\n\r\n            const db = client.db('blog')\r\n\r\n            const articlesInfo = await db.collection('articles')\r\n                                        .findOne({ name: articleName})\r\n            \r\n            res.status(200).json(articlesInfo)\r\n            \r\n            client.close()\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error connecting to db', error })\r\n        }\r\n        \r\n        \r\n    }\r\n)\r\n\r\napp.post(\r\n    '/api/article/:name/upvote',\r\n    async (req, res) => {\r\n        try {\r\n            const articleName = req.params.name\r\n\r\n            const client = await MongoClient.connect(\r\n                'mongodb://localhost:27017', \r\n                { useNewUrlParser: true}\r\n            )\r\n\r\n            const db = client.db('blog')\r\n\r\n            const articlesInfo = await db.collection('articles')\r\n                                            .findOne({ name: articleName})\r\n            await db.collection('articles')\r\n                    .updateOne(\r\n                        { name: articleName},\r\n                        {'$set':{\r\n                            upvotes: articlesInfo.upvotes + 1,\r\n                            },\r\n                        }\r\n                    )\r\n            const updatedArticleInfo = await db.collection('articles')\r\n                                                .findOne({ name: articleName})\r\n\r\n            res.status(200).json(updatedArticleInfo)\r\n\r\n            client.close()\r\n        } catch (error) {\r\n            res.status(500).json({ message: 'Error connecting to db', error })\r\n        }\r\n        \r\n    }\r\n)\r\n\r\napp.post(\r\n    '/api/article/:name/add-comment',\r\n    (req, res) => {\r\n        const { username, text } = req.body\r\n\r\n        const articleName = req.params.name\r\n\r\n        articlesInfo[articleName].comments.push({\r\n            username,\r\n            text\r\n        })\r\n\r\n        res.status(200).send(\r\n            articlesInfo[articleName]\r\n            )\r\n    }\r\n)\r\n\r\napp.listen(8000, () => console.log('Listening on port 8000'))"
      ]
    },
    "sourceType": "script",
    "mtime": 1595418238288
  }
}